openapi: "3.1.0"
info:
  title: "HydraFlow Actions API"
  description: |
    HydraFlow is an adaptive conversational assistant API for context management, query parsing, 
    dynamic sub-persona creation, memory compression, and more. It supports integration with 
    external systems like CustomGPT, ensuring smooth workflows with dynamic feedback and identifiers.
  version: "1.6.0"
servers:
  - url: "https://hydra-flow.vercel.app/api"
    description: "Deployed API server"
components:
  responses:
    ServerError:
      description: "Server error while processing the request."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message."
  schemas:
    ParseQueryResponse:
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
          description: "Keywords extracted from the query."
        actionItems:
          type: array
          items:
            type: string
          description: "Actionable tasks identified from the query."
        taskCard:
          type: object
          properties:
            goal:
              type: string
              description: "Goal of the task."
            priority:
              type: string
              description: "Task priority (e.g., High, Medium)."
            subtasks:
              type: array
              items:
                type: object
                properties:
                  task:
                    type: string
                    description: "Subtask description."
                  status:
                    type: string
                    description: "Subtask status (e.g., pending, completed)."
    MemoryOptimization:
      type: object
      properties:
        threshold:
          type: integer
          description: "Memory usage threshold to trigger compression."
        status:
          type: string
          description: "Status of memory optimization."
    SubpersonaCreation:
      type: object
      properties:
        name:
          type: string
          description: "Name of the sub-persona"
        description:
          type: string
          description: "Description of the sub-persona."
        capabilities:
          type: object
          description: "Capabilities for the sub-persona."
        preferences:
          type: object
          description: "Preferences for the sub-persona."
    LogSummary:
      type: object
      properties:
        summary:
          type: string
          description: "Summary of the log analysis."
        patterns:
          type: array
          items:
            type: string
          description: "Key patterns identified in the logs."
        errors:
          type: array
          items:
            type: string
          description: "Errors found in the logs."
    FeedbackSubmission:
      type: object
      properties:
        comment:
          type: string
          description: "The feedback comment."
        rating:
          type: integer
          description: "The rating (1-5)."
    FeedbackSummary:
      type: object
      properties:
        totalFeedback:
          type: integer
          description: "Total number of feedback entries."
        averageRating:
          type: number
          description: "Average rating from the feedback."
        comments:
          type: array
          items:
            type: string
          description: "List of feedback comments."
    Recommendations:
      type: object
      properties:
        recommendations:
          type: array
          items:
            type: string
          description: "Actionable recommendations based on current metrics."
    ContextUpdate:
      type: object
      properties:
        newData:
          type: object
          description: "The updated context data."
    FeedbackEntry:
      type: object
      properties:
        feedback:
          type: string
          description: "The feedback entry."
    Head:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique identifier for the head (subpersona)."
        name:
          type: string
          description: "Name of the head (subpersona)."
        status:
          type: string
          description: "Status of the head (e.g., active, inactive)."
        user_id:
          type: string
          format: uuid
          description: "User ID associated with the head."
        chatroom_id:
          type: string
          format: uuid
          description: "Chatroom ID associated with the head."
        capabilities:
          type: object
          description: "Capabilities of the head."
          additionalProperties: true
        preferences:
          type: object
          description: "Preferences of the head."
          additionalProperties: true
        createdat:
          type: string
          format: date-time
          description: "Timestamp when the head was created."
    Memory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique identifier for the memory entry."
        user_id:
          type: string
          format: uuid
          description: "User ID associated with the memory."
        chatroom_id:
          type: string
          format: uuid
          description: "Chatroom ID associated with the memory."
        memory:
          type: string
          description: "Actual memory content or a reference to it."
        updated_at:
          type: string
          format: date-time
          description: "Timestamp when the memory entry was last updated."
    TaskCard:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the task card."
        user_id:
          type: string
          format: uuid
          description: "User ID associated with the task card."
        chatroom_id:
          type: string
          format: uuid
          description: "Chatroom ID associated with the task card."
        goal:
          type: string
          description: "The main goal or objective of the task card."
        priority:
          type: string
          enum: ["High", "Medium", "Low"]
          description: "Priority of the task card."
        created_at:
          type: string
          format: date-time
          description: "Timestamp when the task card was created."
        active:
          type: boolean
          description: "Indicates if the task card is currently active."
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Subtask'
          description: "Subtasks associated with the task card."
    Subtask:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the subtask."
        task_card_id:
          type: integer
          description: "ID of the parent task card."
        description:
          type: string
          description: "Description of the subtask."
        status:
          type: string
          enum: ["pending", "completed"]
          description: "Status of the subtask."
        created_at:
          type: string
          format: date-time
          description: "Timestamp when the subtask was created."
        child_dependencies:
          type: array
          items:
            type: integer
          description: "IDs of tasks that depend on this subtask."
        parent_dependencies:
          type: array
          items:
            type: integer
          description: "IDs of tasks that this subtask depends on."

paths:
  /parse-query:
    post:
      operationId: "parseQuery"
      summary: "Parse a query into actionable keywords and tasks"
      description: "Parses user-provided query to extract keywords and actionable tasks, utilizing the session context maintained via the X-Hydra-Session-ID header."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "User query to parse."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["query"]
              properties:
                query:
                  type: string
                  description: "The query input that needs parsing."
      responses:
        200:
          description: "Successfully parsed query."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParseQueryResponse"
        400:
          description: "Invalid input; query missing or malformed."
        500:
          $ref: "#/components/responses/ServerError"

  /create-subpersona:
    post:
      operationId: "createSubpersona"
      summary: "Create a specialized sub-persona"
      description: |
        Dynamically generates a sub-persona for a task, referencing the session context via the X-Hydra-Session-ID header to maintain continuity.
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Details for sub-persona creation."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubpersonaCreation"
      responses:
        200:
          description: "Successfully created a sub-persona."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Response message."
                  subPersona:
                    type: object
                    description: "Details of the created sub-persona."
        400:
          description: "Missing required fields or invalid data."
        500:
          $ref: "#/components/responses/ServerError"

  /compress-memory:
    post:
      operationId: "compressMemory"
      summary: "Compress and optimize memory"
      description: "Compresses lengthy conversation memory for optimized context management. Automatically triggers if memory usage exceeds the defined threshold, utilizing session context from X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Full memory content to compress."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["memory"]
              properties:
                memory:
                  type: string
                  description: "The full conversation memory to be compressed."
      responses:
        200:
          description: "Successfully compressed memory."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoryOptimization"
        400:
          description: "Missing or invalid memory input."
        500:
          $ref: "#/components/responses/ServerError"

  /summarize-logs:
    post:
      operationId: "summarizeLogs"
      summary: "Summarize logs for patterns and errors"
      description: "Analyzes log data to generate summaries of key patterns and errors, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Log data to summarize."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["logs"]
              properties:
                logs:
                  type: string
                  description: "Log data to analyze and summarize."
      responses:
        200:
          description: "Successfully summarized logs."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogSummary"
        400:
          description: "Missing or invalid log data."
        500:
          $ref: "#/components/responses/ServerError"

  /feedback/summary:
    get:
      operationId: "getFeedbackSummary"
      summary: "Retrieve feedback summary"
      description: "Fetches a summarized view of all feedback, including totals and averages, utilizing session context via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        200:
          description: "Successfully retrieved feedback summary."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackSummary"
        500:
          $ref: "#/components/responses/ServerError"

  /fetch-gauge-metrics:
    get:
      operationId: "fetchGaugeMetrics"
      summary: "Fetch gauge metrics for the user interface"
      description: "Provides real-time metrics including token usage, engine load, and latency, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        '200':
          description: "Successfully fetched metrics."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenUsage:
                    type: object
                    properties:
                      used:
                        type: integer
                      total:
                        type: integer
                      remaining:
                        type: integer
                      status:
                        type: string
                  engineLoad:
                    type: string
                  latency:
                    type: number
                  recommendations:
                    type: array
                    items:
                      type: string
        '500':
          $ref: "#/components/responses/ServerError"

  /recommendations:
    get:
      operationId: "getRecommendations"
      summary: "Fetch actionable recommendations"
      description: "Provides recommendations based on system performance and metrics, utilizing session context via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        '200':
          description: "Successfully fetched recommendations."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recommendations"
        '500':
          $ref: "#/components/responses/ServerError"

  /tasks/dependency:
    post:
      operationId: "addTaskDependency"
      summary: "Add a dependency for a subtask"
      description: "Creates a dependency relationship between subtasks, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Details of the dependency to add."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["taskId", "dependencyId"]
              properties:
                taskId:
                  type: integer
                  description: "ID of the subtask."
                dependencyId:
                  type: integer
                  description: "ID of the subtask it depends on."
      responses:
        200:
          description: "Successfully added the dependency."
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: integer
                  dependencies:
                    type: array
                    items:
                      type: integer
        400:
          description: "Invalid input or existing dependency."
        500:
          $ref: "#/components/responses/ServerError"

  /tasks/dependencies/{subtaskId}:
    get:
      operationId: "getTaskDependencies"
      summary: "Fetch task dependencies"
      description: "Fetches all dependencies for a given subtask, utilizing session context via X-Hydra-Session-ID."
      parameters:
        - name: subtaskId
          in: path
          required: true
          schema:
            type: integer
          description: "ID of the subtask."
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        200:
          description: "Successfully fetched task dependencies."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "Dependency ID."
                        dependsOn:
                          type: integer
                          description: "ID of the subtask it depends on."
        400:
          description: "Invalid subtaskId."
        500:
          $ref: "#/components/responses/ServerError"

  /tasks/{taskCardId}:
    get:
      operationId: "getTaskCard"
      summary: "Fetch a task card with its subtasks and dependencies"
      description: "Fetches a specific task card and its associated subtasks and dependencies, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - name: taskCardId
          in: path
          required: true
          schema:
            type: integer
          description: "The ID of the task card."
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        200:
          description: "Successfully fetched the task card."
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskCard:
                    type: object
                    description: "Details of the task card."
        400:
          description: "Invalid or missing taskCardId."
        500:
          $ref: "#/components/responses/ServerError"

  /context/state:
    get:
      operationId: "getContextState"
      summary: "Retrieve the current context state"
      description: "Fetches the current context state for the user and chatroom, utilizing session context via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        200:
          description: "Successfully retrieved the context state."
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentContext:
                    type: object
                    description: "Details of the current context state."
        400:
          description: "Invalid input or missing parameters."
        500:
          $ref: "#/components/responses/ServerError"

    post:
      operationId: "updateContextState"
      summary: "Update the context state"
      description: "Updates the current context state with new data, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Details of the new context state."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContextUpdate"
      responses:
        200:
          description: "Successfully updated the context state."
          content:
            application/json:
              schema:
                type: object
                properties:
                  updatedContext:
                    type: object
                    description: "The updated context data."
        400:
          description: "Invalid input data."
        500:
          $ref: "#/components/responses/ServerError"

  /feedback:
    get:
      operationId: "getFeedback"
      summary: "Retrieve all feedback"
      description: "Fetches all feedback entries, utilizing session context via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        200:
          description: "Successfully retrieved feedback."
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedback:
                    type: array
                    items:
                      type: object
        500:
          $ref: "#/components/responses/ServerError"

    post:
      operationId: "submitFeedback"
      summary: "Submit feedback"
      description: "Submits feedback for a task or workflow, with session context maintained via X-Hydra-Session-ID."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        description: "Details of the feedback to submit."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userFeedback:
                  type: string
                  description: The feedback from the user
                rating:
                  type: integer
                  description: The rating given by the user
              required:
                - userFeedback
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /heads:
    get:
      summary: "Get heads"
      description: "Retrieve heads based on user_id and chatroom_id, utilizing session context via X-Hydra-Session-ID."
      operationId: getHeads
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        '200':
          description: "A list of heads."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Head'

  /memories:
    get:
      summary: "Get memories"
      description: "Retrieve memories based on user_id and chatroom_id, utilizing session context via X-Hydra-Session-ID."
      operationId: getMemories
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        '200':
          description: "A list of memories."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memory'

  /task_cards:
    get:
      summary: "Get task cards"
      description: "Retrieve task cards based on user_id and chatroom_id, utilizing session context via X-Hydra-Session-ID."
      operationId: getTaskCards
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      responses:
        '200':
          description: "A list of task cards."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskCard'

  /feedback_entries:
    post:
      summary: "Post feedback entries"
      description: "Submit feedback entries, utilizing session context via X-Hydra-Session-ID."
      operationId: postFeedbackEntries
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: Session ID for maintaining user context.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  type: string
      responses:
        '201':
          description: "Feedback entry created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackEntry'

  /debug/log:
    post:
      operationId: "logIssue"
      summary: "Log an issue in debug logs"
      description: "Logs an issue and its resolution for a given user and context, utilizing the session context maintained via the X-Hydra-Session-ID header."
      parameters:
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: "Session ID for maintaining user context."
      requestBody:
        description: "Details of the issue to log."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["issue", "resolution"]
              properties:
                issue:
                  type: string
                  description: "Description of the issue."
                resolution:
                  type: string
                  description: "Description of the resolution."
      responses:
        200:
          description: "Issue logged successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  log:
                    type: object
                    description: "Details of the logged issue."
        400:
          description: "Missing or invalid input data."
        500:
          $ref: "#/components/responses/ServerError"

  /debug/logs/{contextId}:
    get:
      operationId: "getDebugLogs"
      summary: "Retrieve debug logs for a specific context"
      description: "Fetches debug logs for a given user and context ID, utilizing the session context maintained via the X-Hydra-Session-ID header."
      parameters:
        - name: contextId
          in: path
          required: true
          schema:
            type: string
            description: "The ID of the context to retrieve logs for."
        - in: header
          name: X-Hydra-Session-ID
          required: true
          schema:
            type: string
          description: "Session ID for maintaining user context."
      responses:
        200:
          description: "Successfully retrieved debug logs."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  logs:
                    type: array
                    items:
                      type: object
                      description: "Debug log entry."
        400:
          description: "Invalid or missing context ID."
        500:
          $ref: "#/components/responses/ServerError"