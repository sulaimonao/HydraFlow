openapi: 3.1.0
info:
  title: HydraFlow Actions API
  description: >
    HydraFlow is an adaptive conversational assistant API for context management, query parsing,
    dynamic sub-persona creation, memory compression, log summarization, context recapping,
    and real-time gauge (instrument cluster) insights.
  version: 1.5.1

servers:
  - url: https://hydra-flow.vercel.app/api
    description: Deployed API server

components:
  schemas:
    ParseQueryResponse:
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
          description: Keywords extracted from the query.
        actionItems:
          type: array
          items:
            type: string
          description: Actionable tasks identified from the query.
        taskCard:
          type: object
          properties:
            goal:
              type: string
              description: Goal of the task.
            priority:
              type: string
              description: Task priority (e.g., High, Medium).
            subtasks:
              type: array
              items:
                type: object
                properties:
                  task:
                    type: string
                    description: Subtask description.
                  status:
                    type: string
                    description: Subtask status (e.g., pending, completed).

    FeedbackEntry:
      type: object
      properties:
        responseId:
          type: string
          description: Response ID associated with the feedback.
        userFeedback:
          type: string
          description: Feedback text provided by the user.
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating given by the user (1-5).
        timestamp:
          type: string
          format: date-time
          description: Time of feedback submission.

    LogSummary:
      type: object
      properties:
        totalEntries:
          type: integer
          description: Total number of log entries analyzed.
        errorCount:
          type: integer
          description: Number of error-like patterns detected.
        firstFiveLines:
          type: string
          description: The first five lines of the log for a quick overview.

    GaugeData:
      type: object
      properties:
        user_id:
          type: string
          description: The user ID being monitored.
        chatroom_id:
          type: string
          description: The chatroom ID or session reference.
        contextSnapshot:
          type: object
          properties:
            priority:
              type: string
              description: Current priority or context-level emphasis.
            keywords:
              type: array
              items:
                type: string
              description: Keywords recognized in the context.
        memoryUsage:
          type: integer
          description: The length of the conversation memory string.
        headCount:
          type: integer
          description: Number of sub-personas (heads) currently active.
        activeTasksCount:
          type: integer
          description: Number of tasks with at least one incomplete subtask.
        limitationNotes:
          type: array
          items:
            type: string
          description: List of constraints or thresholds being applied.

    CompressedMemory:
      type: object
      properties:
        compressedMemory:
          type: string
          description: Resulting compressed memory after optimization.

    Recap:
      type: object
      properties:
        recap:
          type: string
          description: A summarized recap of the context and memory.

    ServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Description of the error.

  responses:
    ServerError:
      description: Server error while processing the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'

paths:
  /parse-query:
    post:
      operationId: parseQuery
      summary: Parse a query into actionable keywords and tasks
      requestBody:
        description: User query to parse.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: The query input that needs parsing.
      responses:
        '200':
          description: Successfully parsed query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParseQueryResponse'
        '400':
          description: Invalid input; query missing or malformed.
        '500':
          $ref: '#/components/responses/ServerError'

  /create-subpersona:
    post:
      operationId: createSubpersona
      summary: Create a specialized sub-persona
      requestBody:
        description: Details for sub-persona creation.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - task
                - description
                - user_id
                - chatroom_id
              properties:
                task:
                  type: string
                  description: The specific task the sub-persona will handle.
                description:
                  type: string
                  description: A detailed description of the sub-persona's role.
                user_id:
                  type: string
                  description: The user ID creating the sub-persona.
                chatroom_id:
                  type: string
                  description: The chatroom ID where the sub-persona will operate.
      responses:
        '201':
          description: Successfully created a sub-persona.
        '500':
          $ref: '#/components/responses/ServerError'

  /compress-memory:
    post:
      operationId: compressMemory
      summary: Compress and optimize memory
      requestBody:
        description: Full memory content to compress.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memory
              properties:
                memory:
                  type: string
                  description: The full conversation memory to be compressed.
      responses:
        '200':
          description: Successfully compressed memory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompressedMemory'
        '500':
          $ref: '#/components/responses/ServerError'

  /context-recap:
    post:
      operationId: contextRecap
      summary: Generate a context recap
      requestBody:
        description: Details for generating a context recap.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - chatroom_id
              properties:
                user_id:
                  type: string
                  description: The user ID.
                chatroom_id:
                  type: string
                  description: The chatroom ID.
      responses:
        '200':
          description: Successfully generated context recap.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recap'
        '500':
          $ref: '#/components/responses/ServerError'

  /gauge:
    get:
      operationId: getGaugeData
      summary: Retrieve real-time gauge (instrument cluster) info
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
        - in: query
          name: chatroom_id
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved gauge data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GaugeData'
        '500':
          $ref: '#/components/responses/ServerError'
