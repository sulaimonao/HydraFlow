openapi: "3.1.0"
info:
  title: "HydraFlow Actions API"
  description: |
    HydraFlow is an adaptive conversational assistant API for context management, query parsing, dynamic sub-persona creation, memory compression, log summarization, and context recapping.
    This version includes proactive memory optimization, enhanced subpersona autonomy, and streamlined context management, real-time gauge insights.
  version: "1.5.0"
servers:
  - url: "https://hydra-flow.vercel.app/api"
    description: "Deployed API server"
components:
  schemas:
    ParseQueryResponse:
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
          description: "Keywords extracted from the query."
        actionItems:
          type: array
          items:
            type: string
          description: "Actionable tasks identified from the query."
        taskCard:
          type: object
          properties:
            goal:
              type: string
              description: "Goal of the task."
            priority:
              type: string
              description: "Task priority (e.g., High, Medium)."
            subtasks:
              type: array
              items:
                type: object
                properties:
                  task:
                    type: string
                    description: "Subtask description."
                  status:
                    type: string
                    description: "Subtask status (e.g., pending, completed)."
    MemoryOptimization:
      type: object
      properties:
        threshold:
          type: integer
          description: "Memory usage threshold to trigger compression."
        status:
          type: string
          description: "Status of memory optimization."
    SubpersonaActivation:
      type: object
      properties:
        triggerCondition:
          type: string
          description: "Condition that activates the subpersona."
        subpersonaDetails:
          type: object
          properties:
            name:
              type: string
              description: "Name of the activated subpersona."
            status:
              type: string
              description: "Status of the subpersona activation."
    LogSummary:
      type: object
      properties:
        summary:
          type: string
          description: "Summary of the log analysis."
        patterns:
          type: array
          items:
            type: string
          description: "Key patterns identified in the logs."
        errors:
          type: array
          items:
            type: string
          description: "Errors found in the logs."
    FeedbackSummary:
      type: object
      properties:
        totalFeedback:
          type: integer
          description: "Total number of feedback entries."
        averageRating:
          type: number
          description: "Average rating from the feedback."
        comments:
          type: array
          items:
            type: string
          description: "List of feedback comments."
    Recommendations:
      type: object
      properties:
        recommendations:
          type: array
          items:
            type: string
          description: "Actionable recommendations based on current metrics."
responses:
  ServerError:
    description: "Server error while processing the request."
    content:
      application/json:
        schema:
          type: object
          properties:
            message:
              type: string
              description: "Error message."
paths:
  /parse-query:
    post:
      operationId: "parseQuery"
      summary: "Parse a query into actionable keywords and tasks"
      description: "Parses user-provided query to extract keywords and actionable tasks."
      requestBody:
        description: "User query to parse."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["query"]
              properties:
                query:
                  type: string
                  description: "The query input that needs parsing."
      responses:
        200:
          description: "Successfully parsed query."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParseQueryResponse"
        400:
          description: "Invalid input; query missing or malformed."
        500:
          $ref: "#/responses/ServerError"
  /create-subpersona:
    post:
      operationId: "createSubpersona"
      summary: "Create a specialized sub-persona"
      description: "Dynamically generates a specialized sub-persona for a specified task, with optional self-activation logic."
      requestBody:
        description: "Details for sub-persona creation."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["task", "description"]
              properties:
                task:
                  type: string
                  description: "The specific task the sub-persona will handle."
                description:
                  type: string
                  description: "A detailed description of the sub-persona's role."
                triggerCondition:
                  type: string
                  description: "Condition for subpersona self-activation."
      responses:
        200:
          description: "Successfully created a sub-persona."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubpersonaActivation"
        400:
          description: "Missing task or description fields."
        500:
          $ref: "#/responses/ServerError"
  /compress-memory:
    post:
      operationId: "compressMemory"
      summary: "Compress and optimize memory"
      description: "Compresses lengthy conversation memory for optimized context management. Automatically triggers if memory usage exceeds the defined threshold."
      requestBody:
        description: "Full memory content to compress."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["memory"]
              properties:
                memory:
                  type: string
                  description: "The full conversation memory to be compressed."
      responses:
        200:
          description: "Successfully compressed memory."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoryOptimization"
        400:
          description: "Missing or invalid memory input."
        500:
          $ref: "#/responses/ServerError"
  /summarize-logs:
    post:
      operationId: "summarizeLogs"
      summary: "Summarize logs for patterns and errors"
      description: "Analyzes log data to generate summaries of key patterns and errors."
      requestBody:
        description: "Log data to summarize."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["logs"]
              properties:
                logs:
                  type: string
                  description: "Log data to analyze and summarize."
      responses:
        200:
          description: "Successfully summarized logs."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogSummary"
        400:
          description: "Missing or invalid log data."
        500:
          $ref: "#/responses/ServerError"
  /feedback/summary:
    get:
      operationId: "getFeedbackSummary"
      summary: "Retrieve feedback summary"
      description: "Fetches a summarized view of all feedback, including totals and averages."
      responses:
        200:
          description: "Successfully retrieved feedback summary."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackSummary"
        500:
          $ref: "#/responses/ServerError"
  /fetch-gauge-metrics:
    get:
      operationId: "fetchGaugeMetrics"
      summary: "Fetch gauge metrics for the user interface"
      description: "Provides real-time metrics including token usage, engine load, and latency."
      responses:
        200:
          description: "Successfully fetched metrics."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenUsage:
                    type: object
                    properties:
                      used:
                        type: integer
                      total:
                        type: integer
                      remaining:
                        type: integer
                      status:
                        type: string
                  engineLoad:
                    type: string
                  latency:
                    type: number
                  recommendations:
                    type: array
                    items:
                      type: string
        500:
          description: "Server error."
  /recommendations:
    get:
      operationId: "getRecommendations"
      summary: "Fetch actionable recommendations"
      description: "Provides recommendations based on system performance and metrics."
      responses:
        200:
          description: "Successfully fetched recommendations."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recommendations"
        500:
          $ref: "#/responses/ServerError"
  /tasks/dependency:
    post:
      operationId: "addTaskDependency"
      summary: "Add a task dependency"
      description: "Creates a dependency relationship between subtasks."
      requestBody:
        description: "Details of the task dependency."
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["subtaskId", "dependsOn"]
              properties:
                subtaskId:
                  type: integer
                  description: "ID of the subtask."
                dependsOn:
                  type: integer
                  description: "ID of the subtask it depends on."
      responses:
        200:
          description: "Successfully added task dependency."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  dependency:
                    type: object
                    description: "Details of the created dependency."
        400:
          description: "Invalid input."
        500:
          $ref: "#/responses/ServerError"
  /tasks/dependencies/{subtaskId}:
    get:
      operationId: "getTaskDependencies"
      summary: "Fetch task dependencies"
      description: "Fetches all dependencies for a given subtask."
      parameters:
        - name: subtaskId
          in: path
          required: true
          schema:
            type: integer
          description: "ID of the subtask."
      responses:
        200:
          description: "Successfully fetched task dependencies."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "Dependency ID."
                        dependsOn:
                          type: integer
                          description: "ID of the subtask it depends on."
        400:
          description: "Invalid subtaskId."
        500:
          $ref: "#/responses/ServerError"
  /tasks/{taskCardId}:
    get:
      operationId: "getTaskCard"
      summary: "Fetch task card with subtasks and dependencies"
      description: "Fetches a task card, its subtasks, and their dependencies."
      parameters:
        - name: taskCardId
          in: path
          required: true
          schema:
            type: integer
          description: "ID of the task card."
      responses:
        200:
          description: "Successfully fetched task card."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message."
                  taskCard:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "Task card ID."
                      goal:
                        type: string
                        description: "Goal of the task card."
                      priority:
                        type: string
                        description: "Priority level of the task card."
                      subtasks:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: "Subtask ID."
                            description:
                              type: string
                              description: "Description of the subtask."
                            status:
                              type: string
                              description: "Status of the subtask."
                            dependencies:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    description: "Dependency ID."
                                  dependsOn:
                                    type: integer
                                    description: "ID of the subtask it depends on."
        400:
          description: "Invalid taskCardId."
        500:
          $ref: "#/responses/ServerError"
